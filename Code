%matplotlib inline
from matplotlib import pyplot as plt
import numpy as np


# each point [0] independent, point [1] independent, point [2] type (0, 1)

data = [[2.45,   0, 0],
        [3.25,   0, 0],
        [2.22,   0, 0],
        [2.20,   0, 0],
        [3.08,   0, 0],
        [2.26,   0, 0],
        [2.34,   0, 0],
        [2.21,   0, 0],
        [2.40,   0, 0],
        [1.57,   0, 0],
        [2.74,   0, 1],
        [2.71,   0, 1],
        [2.12,   0, 1],
        [3.15,   0, 1],
        [3.11,   0, 1],
        [2.56,   0, 1],
        [2.83,   0, 1],
        [2.64,   0, 1],
        [2.47,   0, 1],
        [1.69,   0, 1]]

#mystery_person = [1.77, 0]
#mystery_person = [2.19, 0]
#mystery_person = [2.26, 0]
#mystery_person = [2.34, 0]
#mystery_person = [2.39, 0]
#mystery_person = [2.45, 0]
#mystery_person = [2.55, 0]
#mystery_person = [2.93, 0]
#mystery_person = [2.99, 0]
mystery_person = [3.00, 0]


# activation function

def sigmoid(x):
    return 1/(1+np.exp(-x))
def sigmoid_p(x):
    return sigmoid(x) * (1-sigmoid(x))
    
    
    
# scatter plot them
def vis_data():
    plt.grid()

    for i in range(len(data)):
        c = 'r'
        if data[i][2] == 0:
            c = 'b'
        plt.scatter([data[i][0]], [data[i][1]], c=c)

    plt.scatter([mystery_person[0]], [mystery_person[1]], c='gray')





# train
    
learning_rate = 0.1
costs = [] 

w1 = 0.48695414168487927
w2 = -0.4000861001030394
b = -1.2741021279189266
    
for i in range(10000):
        # get a random point
        ri = np.random.randint(len(data))
        point = data[ri]
        
        z = point[0] * w1 + point[1] * w2 + b
        pred = sigmoid(z) # networks prediction
        
        target = point[2]
        
        # cost for current random point
        cost = np.square(pred - target)

        dcost_dpred = 2 * (pred - target)
        dpred_dz = sigmoid_p(z)
        
        dz_dw1 = point[0]
        dz_dw2 = point[1]
        dz_db = 1
        
        dcost_dz = dcost_dpred * dpred_dz
        
        dcost_dw1 = dcost_dz * dz_dw1 
        dcost_dw2 = dcost_dz * dz_dw2 
        dcost_db = dcost_dz * dz_db 
        
        w1 = w1 - learning_rate * dcost_dw1
        w2 = w2 - learning_rate * dcost_dw2
        b = b - learning_rate * dcost_db

        if i % 100 == 0:
          cost_sum = 0
          for j in range(len(data)):
                point = data[ri]

                z = point[0] * w1 + point [1] * w2 + b
                pred = sigmoid(z)

                target = point[2]
                cost_sum += np.square(pred - target)

                costs.append(cost_sum/len(data))
plt.plot(costs)




for i in range(len(data)):
  point = data[i]
  print(point)
  z = point[0] * w1 + point[1] * w2 + b
  pred = sigmoid(z)
  print("pred: {}".format(pred))
  
  
  
  
  # predict what the mystery person is!

z = w1 * mystery_person[0] + w2 * mystery_person[1] + b
pred = sigmoid(z)

print(pred)
print("close to 0 -> no disease, close to 1 -> yes disease")
vis_data()
